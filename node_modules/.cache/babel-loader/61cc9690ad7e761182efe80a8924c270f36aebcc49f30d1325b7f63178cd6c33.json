{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { expiresAt, looksLikeFetchResponse } from './helpers';\nimport { AuthApiError, AuthRetryableFetchError, AuthUnknownError } from './errors';\nconst _getErrorMessage = err => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst NETWORK_ERROR_CODES = [502, 503, 504];\nasync function handleError(error) {\n  if (!looksLikeFetchResponse(error)) {\n    throw new AuthRetryableFetchError(_getErrorMessage(error), 0);\n  }\n  if (NETWORK_ERROR_CODES.includes(error.status)) {\n    // status in 500...599 range - server had an error, request might be retryed.\n    throw new AuthRetryableFetchError(_getErrorMessage(error), error.status);\n  }\n  let data;\n  try {\n    data = await error.json();\n  } catch (e) {\n    throw new AuthUnknownError(_getErrorMessage(e), e);\n  }\n  throw new AuthApiError(_getErrorMessage(data), error.status || 500);\n}\nconst _getRequestParams = (method, options, parameters, body) => {\n  const params = {\n    method,\n    headers: (options === null || options === void 0 ? void 0 : options.headers) || {}\n  };\n  if (method === 'GET') {\n    return params;\n  }\n  params.headers = Object.assign({\n    'Content-Type': 'application/json;charset=UTF-8'\n  }, options === null || options === void 0 ? void 0 : options.headers);\n  params.body = JSON.stringify(body);\n  return Object.assign(Object.assign({}, params), parameters);\n};\nexport async function _request(fetcher, method, url, options) {\n  var _a;\n  const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);\n  if (options === null || options === void 0 ? void 0 : options.jwt) {\n    headers['Authorization'] = `Bearer ${options.jwt}`;\n  }\n  const qs = (_a = options === null || options === void 0 ? void 0 : options.query) !== null && _a !== void 0 ? _a : {};\n  if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n    qs['redirect_to'] = options.redirectTo;\n  }\n  const queryString = Object.keys(qs).length ? '?' + new URLSearchParams(qs).toString() : '';\n  const data = await _handleRequest(fetcher, method, url + queryString, {\n    headers,\n    noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson\n  }, {}, options === null || options === void 0 ? void 0 : options.body);\n  return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data) : {\n    data: Object.assign({}, data),\n    error: null\n  };\n}\nasync function _handleRequest(fetcher, method, url, options, parameters, body) {\n  const requestParams = _getRequestParams(method, options, parameters, body);\n  let result;\n  try {\n    result = await fetcher(url, requestParams);\n  } catch (e) {\n    console.error(e);\n    // fetch failed, likely due to a network or CORS error\n    throw new AuthRetryableFetchError(_getErrorMessage(e), 0);\n  }\n  if (!result.ok) {\n    await handleError(result);\n  }\n  if (options === null || options === void 0 ? void 0 : options.noResolveJson) {\n    return result;\n  }\n  try {\n    return await result.json();\n  } catch (e) {\n    await handleError(e);\n  }\n}\nexport function _sessionResponse(data) {\n  var _a;\n  let session = null;\n  if (hasSession(data)) {\n    session = Object.assign({}, data);\n    session.expires_at = expiresAt(data.expires_in);\n  }\n  const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;\n  return {\n    data: {\n      session,\n      user\n    },\n    error: null\n  };\n}\nexport function _userResponse(data) {\n  var _a;\n  const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;\n  return {\n    data: {\n      user\n    },\n    error: null\n  };\n}\nexport function _ssoResponse(data) {\n  return {\n    data,\n    error: null\n  };\n}\nexport function _generateLinkResponse(data) {\n  const {\n      action_link,\n      email_otp,\n      hashed_token,\n      redirect_to,\n      verification_type\n    } = data,\n    rest = __rest(data, [\"action_link\", \"email_otp\", \"hashed_token\", \"redirect_to\", \"verification_type\"]);\n  const properties = {\n    action_link,\n    email_otp,\n    hashed_token,\n    redirect_to,\n    verification_type\n  };\n  const user = Object.assign({}, rest);\n  return {\n    data: {\n      properties,\n      user\n    },\n    error: null\n  };\n}\nexport function _noResolveJsonResponse(data) {\n  return data;\n}\n/**\n * hasSession checks if the response object contains a valid session\n * @param data A response object\n * @returns true if a session is in the response\n */\nfunction hasSession(data) {\n  return data.access_token && data.refresh_token && data.expires_in;\n}","map":{"version":3,"mappings":"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","names":["expiresAt","looksLikeFetchResponse","AuthApiError","AuthRetryableFetchError","AuthUnknownError","_getErrorMessage","err","msg","message","error_description","error","JSON","stringify","NETWORK_ERROR_CODES","handleError","includes","status","data","json","e","_getRequestParams","method","options","parameters","body","params","headers","_request","fetcher","url","jwt","qs","query","redirectTo","queryString","Object","keys","length","URLSearchParams","toString","_handleRequest","noResolveJson","xform","requestParams","result","console","ok","_sessionResponse","session","hasSession","expires_at","expires_in","user","_userResponse","_ssoResponse","_generateLinkResponse","action_link","email_otp","hashed_token","redirect_to","verification_type","rest","properties","_noResolveJsonResponse","access_token","refresh_token"],"sources":["/home/alexbriannaughton/Development/code/react-prax/supabase_login_signup_tutorial/node_modules/@supabase/gotrue-js/src/lib/fetch.ts"],"sourcesContent":["import { expiresAt, looksLikeFetchResponse } from './helpers'\nimport {\n  AuthResponse,\n  SSOResponse,\n  GenerateLinkProperties,\n  GenerateLinkResponse,\n  User,\n  UserResponse,\n} from './types'\nimport { AuthApiError, AuthRetryableFetchError, AuthUnknownError } from './errors'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport interface FetchParameters {\n  signal?: AbortSignal\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst NETWORK_ERROR_CODES = [502, 503, 504]\n\nasync function handleError(error: unknown) {\n  if (!looksLikeFetchResponse(error)) {\n    throw new AuthRetryableFetchError(_getErrorMessage(error), 0)\n  }\n\n  if (NETWORK_ERROR_CODES.includes(error.status)) {\n    // status in 500...599 range - server had an error, request might be retryed.\n    throw new AuthRetryableFetchError(_getErrorMessage(error), error.status)\n  }\n\n  let data: any\n  try {\n    data = await error.json()\n  } catch (e: any) {\n    throw new AuthUnknownError(_getErrorMessage(e), e)\n  }\n\n  throw new AuthApiError(_getErrorMessage(data), error.status || 500)\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json;charset=UTF-8', ...options?.headers }\n  params.body = JSON.stringify(body)\n  return { ...params, ...parameters }\n}\n\ninterface GotrueRequestOptions extends FetchOptions {\n  jwt?: string\n  redirectTo?: string\n  body?: object\n  query?: { [key: string]: string }\n  /**\n   * Function that transforms api response from gotrue into a desirable / standardised format\n   */\n  xform?: (data: any) => any\n}\n\nexport async function _request(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: GotrueRequestOptions\n) {\n  const headers = { ...options?.headers }\n  if (options?.jwt) {\n    headers['Authorization'] = `Bearer ${options.jwt}`\n  }\n  const qs = options?.query ?? {}\n  if (options?.redirectTo) {\n    qs['redirect_to'] = options.redirectTo\n  }\n  const queryString = Object.keys(qs).length ? '?' + new URLSearchParams(qs).toString() : ''\n  const data = await _handleRequest(\n    fetcher,\n    method,\n    url + queryString,\n    { headers, noResolveJson: options?.noResolveJson },\n    {},\n    options?.body\n  )\n  return options?.xform ? options?.xform(data) : { data: { ...data }, error: null }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  const requestParams = _getRequestParams(method, options, parameters, body)\n\n  let result: any\n\n  try {\n    result = await fetcher(url, requestParams)\n  } catch (e) {\n    console.error(e)\n\n    // fetch failed, likely due to a network or CORS error\n    throw new AuthRetryableFetchError(_getErrorMessage(e), 0)\n  }\n\n  if (!result.ok) {\n    await handleError(result)\n  }\n\n  if (options?.noResolveJson) {\n    return result\n  }\n\n  try {\n    return await result.json()\n  } catch (e: any) {\n    await handleError(e)\n  }\n}\n\nexport function _sessionResponse(data: any): AuthResponse {\n  let session = null\n  if (hasSession(data)) {\n    session = { ...data }\n    session.expires_at = expiresAt(data.expires_in)\n  }\n  const user: User = data.user ?? (data as User)\n  return { data: { session, user }, error: null }\n}\n\nexport function _userResponse(data: any): UserResponse {\n  const user: User = data.user ?? (data as User)\n  return { data: { user }, error: null }\n}\n\nexport function _ssoResponse(data: any): SSOResponse {\n  return { data, error: null }\n}\n\nexport function _generateLinkResponse(data: any): GenerateLinkResponse {\n  const { action_link, email_otp, hashed_token, redirect_to, verification_type, ...rest } = data\n\n  const properties: GenerateLinkProperties = {\n    action_link,\n    email_otp,\n    hashed_token,\n    redirect_to,\n    verification_type,\n  }\n\n  const user: User = { ...rest }\n  return {\n    data: {\n      properties,\n      user,\n    },\n    error: null,\n  }\n}\n\nexport function _noResolveJsonResponse(data: any): Response {\n  return data\n}\n\n/**\n * hasSession checks if the response object contains a valid session\n * @param data A response object\n * @returns true if a session is in the response\n */\nfunction hasSession(data: any): boolean {\n  return data.access_token && data.refresh_token && data.expires_in\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}